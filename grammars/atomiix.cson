'scopeName': 'source.atomiix'
'fileTypes': [
  'atomiix', 'ixi'
]
'name': 'Atomiix'
'patterns': [

  # melodic scores
  {
    'match': '\\[.*?\\]'
    'name': 'constant.numeric.atomiix'
  }

  # percussive scores
  {
    'match': '\\|.*?\\|'
    'name': 'string.single.atomiix'
  }

  # concrete scores
  {
    'match': '\\{.*?\\}'
    'name': 'storage.atomiix'
  }

  # arrow operator
  {
    'match': '\-\>'
    'name': 'keyword.operator.atomiix'
  }

  # bracket operator
  {
    'match': '\\(\\b(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))\\b\\)'
    'name': 'support.function.atomiix'
  }

  # caret operator
  {
    'match': '\\^\\b(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))\\b\\^'
    'name': 'support.function.atomiix'
  }

  # plus minus operator
  {
    'match': '((\\+)|(-))\\b(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))\\b'
    'name': 'support.function.atomiix'
  }

  # angle bracket operator
  {
    'match': '\\<\\b(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))\\b\\>'
    'name': 'support.function.atomiix'
  }

  # volume
  {
    'match': '(\\w+\\s+\\(\\()|(\\w+\\s+\\)\\))'
    'name': 'variable.parameter.atomiix'
  }

  # comments
  {
    'match': '\\/\\*[\\s\\S]*?\\*\\/|([^\\\\:]|^)\\/\\/.*$'
    'name': 'comment.atomiix'
  }
]
